/**
 * Hoster API
 * Hosting automation. The easy way
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { AcceptedNotificationMethods } from './acceptedNotificationMethods';
import { Currency } from './currency';
import { CustomAddonPricePolicies } from './customAddonPricePolicies';
import { CustomAffiliates } from './customAffiliates';
import { CustomPricePolicies } from './customPricePolicies';
import { DefaultInvoiceContact } from './defaultInvoiceContact';
import { PaymentSubscriptionDto } from './paymentSubscriptionDto';
import { PersistentCart } from './persistentCart';

export class UserDto {
    /**
    * A unique identifier for the user.
    */
    'id'?: string;
    /**
    * An email address connected to the user.
    */
    'email'?: string;
    /**
    * Saves the user\'s default language.
    */
    'defaultLanguage'?: UserDto.DefaultLanguageEnum;
    /**
    * Indicate if a user has locked payments.
    */
    'lockedPayments'?: boolean;
    /**
    * Indicates if a user is banned.
    */
    'banned'?: boolean;
    /**
    * Three letter code about the currency this user use.
    */
    'currencyThreeLetterCode'?: string;
    /**
    * A unique identifier that indicates the parent company user belongs.
    */
    'parentCompanyId'?: string;
    'ownInvoiceContact'?: DefaultInvoiceContact;
    /**
    * A unique identifier that indicates the policy applied to this user.
    */
    'policyId'?: string;
    'customPricePolicies'?: CustomPricePolicies;
    'customAddonPricePolicies'?: CustomAddonPricePolicies;
    'customAffiliates'?: CustomAffiliates;
    /**
    * An array containing comments related to the user.
    */
    'comments'?: Array<string>;
    'currency'?: Currency;
    /**
    * Indicates invoice frequency.
    */
    'invoiceInterval'?: UserDto.InvoiceIntervalEnum;
    'acceptedNotificationMethods'?: AcceptedNotificationMethods;
    'persistentCart'?: PersistentCart;
    /**
    * User tags - only parent can see this
    */
    'tags'?: string;
    /**
    * User logs - only parent can see this
    */
    'logs'?: string;
    /**
    * Additional emails to send notifications
    */
    'additionalNotificationEmails'?: string;
    /**
    * Indicates the credit balance.
    */
    'creditBalance'?: number;
    /**
    * Indicates user account balance
    */
    'balance'?: number = 0;
    /**
    * An array of payment subscriptions associated with the user.
    */
    'paymentSubscriptions'?: Array<PaymentSubscriptionDto>;
    /**
    * The date the user was created.
    */
    'createdAt'?: Date;
    /**
    * The date the user was last updated.
    */
    'updatedAt'?: Date;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "email",
            "baseName": "email",
            "type": "string"
        },
        {
            "name": "defaultLanguage",
            "baseName": "defaultLanguage",
            "type": "UserDto.DefaultLanguageEnum"
        },
        {
            "name": "lockedPayments",
            "baseName": "lockedPayments",
            "type": "boolean"
        },
        {
            "name": "banned",
            "baseName": "banned",
            "type": "boolean"
        },
        {
            "name": "currencyThreeLetterCode",
            "baseName": "currencyThreeLetterCode",
            "type": "string"
        },
        {
            "name": "parentCompanyId",
            "baseName": "parentCompanyId",
            "type": "string"
        },
        {
            "name": "ownInvoiceContact",
            "baseName": "ownInvoiceContact",
            "type": "DefaultInvoiceContact"
        },
        {
            "name": "policyId",
            "baseName": "policyId",
            "type": "string"
        },
        {
            "name": "customPricePolicies",
            "baseName": "customPricePolicies",
            "type": "CustomPricePolicies"
        },
        {
            "name": "customAddonPricePolicies",
            "baseName": "customAddonPricePolicies",
            "type": "CustomAddonPricePolicies"
        },
        {
            "name": "customAffiliates",
            "baseName": "customAffiliates",
            "type": "CustomAffiliates"
        },
        {
            "name": "comments",
            "baseName": "comments",
            "type": "Array<string>"
        },
        {
            "name": "currency",
            "baseName": "currency",
            "type": "Currency"
        },
        {
            "name": "invoiceInterval",
            "baseName": "invoiceInterval",
            "type": "UserDto.InvoiceIntervalEnum"
        },
        {
            "name": "acceptedNotificationMethods",
            "baseName": "acceptedNotificationMethods",
            "type": "AcceptedNotificationMethods"
        },
        {
            "name": "persistentCart",
            "baseName": "persistentCart",
            "type": "PersistentCart"
        },
        {
            "name": "tags",
            "baseName": "tags",
            "type": "string"
        },
        {
            "name": "logs",
            "baseName": "logs",
            "type": "string"
        },
        {
            "name": "additionalNotificationEmails",
            "baseName": "additionalNotificationEmails",
            "type": "string"
        },
        {
            "name": "creditBalance",
            "baseName": "creditBalance",
            "type": "number"
        },
        {
            "name": "balance",
            "baseName": "balance",
            "type": "number"
        },
        {
            "name": "paymentSubscriptions",
            "baseName": "paymentSubscriptions",
            "type": "Array<PaymentSubscriptionDto>"
        },
        {
            "name": "createdAt",
            "baseName": "createdAt",
            "type": "Date"
        },
        {
            "name": "updatedAt",
            "baseName": "updatedAt",
            "type": "Date"
        }    ];

    static getAttributeTypeMap() {
        return UserDto.attributeTypeMap;
    }
}

export namespace UserDto {
    export enum DefaultLanguageEnum {
        Aa = <any> 'aa',
        Af = <any> 'af',
        Ak = <any> 'ak',
        Sq = <any> 'sq',
        Am = <any> 'am',
        Ar = <any> 'ar',
        An = <any> 'an',
        Hy = <any> 'hy',
        As = <any> 'as',
        Av = <any> 'av',
        Ae = <any> 'ae',
        Ay = <any> 'ay',
        Az = <any> 'az',
        Bm = <any> 'bm',
        Ba = <any> 'ba',
        Eu = <any> 'eu',
        Be = <any> 'be',
        Bn = <any> 'bn',
        Bh = <any> 'bh',
        Bi = <any> 'bi',
        Bs = <any> 'bs',
        Br = <any> 'br',
        Bg = <any> 'bg',
        My = <any> 'my',
        Ca = <any> 'ca',
        Ch = <any> 'ch',
        Ce = <any> 'ce',
        Ny = <any> 'ny',
        Zh = <any> 'zh',
        Cv = <any> 'cv',
        Kw = <any> 'kw',
        Co = <any> 'co',
        Cr = <any> 'cr',
        Hr = <any> 'hr',
        Cs = <any> 'cs',
        Da = <any> 'da',
        Dv = <any> 'dv',
        Nl = <any> 'nl',
        Dz = <any> 'dz',
        En = <any> 'en',
        Eo = <any> 'eo',
        Et = <any> 'et',
        Ee = <any> 'ee',
        Fo = <any> 'fo',
        Fj = <any> 'fj',
        Fi = <any> 'fi',
        Fr = <any> 'fr',
        Ff = <any> 'ff',
        Gl = <any> 'gl',
        Ka = <any> 'ka',
        De = <any> 'de',
        El = <any> 'el',
        Gn = <any> 'gn',
        Gu = <any> 'gu',
        Ht = <any> 'ht',
        Ha = <any> 'ha',
        He = <any> 'he',
        Hz = <any> 'hz',
        Hi = <any> 'hi',
        Ho = <any> 'ho',
        Hu = <any> 'hu',
        Ia = <any> 'ia',
        Id = <any> 'id',
        Ie = <any> 'ie',
        Ga = <any> 'ga',
        Ig = <any> 'ig',
        Ik = <any> 'ik',
        Io = <any> 'io',
        Is = <any> 'is',
        It = <any> 'it',
        Iu = <any> 'iu',
        Ja = <any> 'ja',
        Jv = <any> 'jv',
        Kl = <any> 'kl',
        Kn = <any> 'kn',
        Kr = <any> 'kr',
        Ks = <any> 'ks',
        Kk = <any> 'kk',
        Km = <any> 'km',
        Ki = <any> 'ki',
        Rw = <any> 'rw',
        Ky = <any> 'ky',
        Kv = <any> 'kv',
        Kg = <any> 'kg',
        Ko = <any> 'ko',
        Ku = <any> 'ku',
        Kj = <any> 'kj',
        La = <any> 'la',
        Lb = <any> 'lb',
        Lg = <any> 'lg',
        Li = <any> 'li',
        Ln = <any> 'ln',
        Lo = <any> 'lo',
        Lt = <any> 'lt',
        Lu = <any> 'lu',
        Lv = <any> 'lv',
        Gv = <any> 'gv',
        Mk = <any> 'mk',
        Mg = <any> 'mg',
        Ms = <any> 'ms',
        Ml = <any> 'ml',
        Mt = <any> 'mt',
        Mi = <any> 'mi',
        Mr = <any> 'mr',
        Mh = <any> 'mh',
        Mn = <any> 'mn',
        Na = <any> 'na',
        Nv = <any> 'nv',
        Nd = <any> 'nd',
        Ne = <any> 'ne',
        Ng = <any> 'ng',
        Nb = <any> 'nb',
        Nn = <any> 'nn',
        No = <any> 'no',
        Ii = <any> 'ii',
        Nr = <any> 'nr',
        Oc = <any> 'oc',
        Oj = <any> 'oj',
        Cu = <any> 'cu',
        Om = <any> 'om',
        Or = <any> 'or',
        Os = <any> 'os',
        Pa = <any> 'pa',
        Pi = <any> 'pi',
        Fa = <any> 'fa',
        Pl = <any> 'pl',
        Ps = <any> 'ps',
        Pt = <any> 'pt',
        Qu = <any> 'qu',
        Rm = <any> 'rm',
        Rn = <any> 'rn',
        Ro = <any> 'ro',
        Rh = <any> 'rh',
        Ru = <any> 'ru',
        Sa = <any> 'sa',
        Sc = <any> 'sc',
        Sd = <any> 'sd',
        Se = <any> 'se',
        Sm = <any> 'sm',
        Sg = <any> 'sg',
        Sr = <any> 'sr',
        Gd = <any> 'gd',
        Sn = <any> 'sn',
        Si = <any> 'si',
        Sk = <any> 'sk',
        Sl = <any> 'sl',
        So = <any> 'so',
        St = <any> 'st',
        Es = <any> 'es',
        Su = <any> 'su',
        Sw = <any> 'sw',
        Ss = <any> 'ss',
        Sv = <any> 'sv',
        Ta = <any> 'ta',
        Te = <any> 'te',
        Tg = <any> 'tg',
        Th = <any> 'th',
        Ti = <any> 'ti',
        Bo = <any> 'bo',
        Tk = <any> 'tk',
        Tl = <any> 'tl',
        Tn = <any> 'tn',
        To = <any> 'to',
        Tr = <any> 'tr',
        Ts = <any> 'ts',
        Tt = <any> 'tt',
        Tw = <any> 'tw',
        Ty = <any> 'ty',
        Ug = <any> 'ug',
        Uk = <any> 'uk',
        Ur = <any> 'ur',
        Uz = <any> 'uz',
        Ve = <any> 've',
        Vi = <any> 'vi',
        Vo = <any> 'vo',
        Wa = <any> 'wa',
        Cy = <any> 'cy',
        Wo = <any> 'wo',
        Fy = <any> 'fy',
        Xh = <any> 'xh',
        Yi = <any> 'yi',
        Yo = <any> 'yo',
        Za = <any> 'za',
        Zu = <any> 'zu'
    }
    export enum InvoiceIntervalEnum {
        Instant = <any> 'instant',
        Weekly = <any> 'weekly',
        Monthly = <any> 'monthly',
        PerRequest = <any> 'per request'
    }
}
