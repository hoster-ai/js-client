/**
 * Hoster API
 * Hosting automation. The easy way
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { AffiliateData } from './affiliateData';
import { ItemAddonDto } from './itemAddonDto';
import { ItemCurrency } from './itemCurrency';
import { PricesDto } from './pricesDto';
import { ProductCategoryDetails } from './productCategoryDetails';
import { ProductDetails } from './productDetails';

export class ItemDto {
    /**
    * Unique identifier for the item
    */
    'id'?: string;
    /**
    * Unique identifier for the company associated with the item
    */
    'companyId'?: string;
    /**
    * Name of the item
    */
    'name'?: string;
    /**
    * Type of the item (e.g., PRODUCT)
    */
    'type'?: ItemDto.TypeEnum;
    /**
    * Unique identifier for the order associated with the item
    */
    'orderId'?: string;
    /**
    * Action related to the item
    */
    'action'?: ItemDto.ActionEnum;
    /**
    * Unique identifier for the parent order associated with the item
    */
    'parentOrderId'?: string;
    /**
    * Status of the item
    */
    'status': ItemDto.StatusEnum;
    'productCategoryDetails'?: ProductCategoryDetails;
    'productDetails': ProductDetails;
    /**
    * Addons associated with the item
    */
    'itemAddons'?: Array<ItemAddonDto>;
    'currency'?: ItemCurrency;
    /**
    * Metadata associated with the item
    */
    'itemMeta'?: { [key: string]: any; };
    /**
    * These are all the attributes of the General Product as assigned by the Seller.
    */
    'productAttributes': { [key: string]: any; };
    /**
    * Flag indicating whether the item has been transferred out
    */
    'autoRenew'?: boolean;
    /**
    * Flag indicating whether the item has been transferred out
    */
    'transferredOut'?: boolean;
    /**
    * Unique identifier for the user from whom the item was transferred
    */
    'transferredFromUserId'?: string;
    /**
    * Flag indicating whether the item has expired
    */
    'expired'?: boolean;
    /**
    * Comment associated with the parent item
    */
    'parentComment'?: string;
    /**
    * Comment associated with the user
    */
    'userComment'?: string;
    /**
    * Price details of the item
    */
    'price'?: PricesDto;
    /**
    * Duration of the item\'s subscription in months
    */
    'duration': ItemDto.DurationEnum;
    /**
    * Unique identifiers for items that are bundled with this item
    */
    'bundles'?: string;
    /**
    * Unique identifier for the item with which this item is bundled
    */
    'bundledWith'?: string;
    /**
    * Unique identifiers for associated IP addresses
    */
    'ipIds'?: Array<string>;
    /**
    * Email addresses for additional notifications
    */
    'additionalNotificationEmails'?: Array<string>;
    /**
    * Unique identifier for the associated domain name
    */
    'domainNameId'?: string;
    'affiliateData'?: AffiliateData;
    /**
    * Start date of the item
    */
    'startDate'?: Date;
    /**
    * End date of the item
    */
    'endDate'?: Date;
    /**
    * Dates when the item was postponed
    */
    'timesPostponed'?: Array<Date>;
    'meta': object;
    /**
    * Date when the item was created
    */
    'createdAt'?: Date;
    /**
    * Date when the item was last updated
    */
    'updatedAt'?: Date;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "companyId",
            "baseName": "companyId",
            "type": "string"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "ItemDto.TypeEnum"
        },
        {
            "name": "orderId",
            "baseName": "orderId",
            "type": "string"
        },
        {
            "name": "action",
            "baseName": "action",
            "type": "ItemDto.ActionEnum"
        },
        {
            "name": "parentOrderId",
            "baseName": "parentOrderId",
            "type": "string"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "ItemDto.StatusEnum"
        },
        {
            "name": "productCategoryDetails",
            "baseName": "productCategoryDetails",
            "type": "ProductCategoryDetails"
        },
        {
            "name": "productDetails",
            "baseName": "productDetails",
            "type": "ProductDetails"
        },
        {
            "name": "itemAddons",
            "baseName": "itemAddons",
            "type": "Array<ItemAddonDto>"
        },
        {
            "name": "currency",
            "baseName": "currency",
            "type": "ItemCurrency"
        },
        {
            "name": "itemMeta",
            "baseName": "itemMeta",
            "type": "{ [key: string]: any; }"
        },
        {
            "name": "productAttributes",
            "baseName": "productAttributes",
            "type": "{ [key: string]: any; }"
        },
        {
            "name": "autoRenew",
            "baseName": "autoRenew",
            "type": "boolean"
        },
        {
            "name": "transferredOut",
            "baseName": "transferredOut",
            "type": "boolean"
        },
        {
            "name": "transferredFromUserId",
            "baseName": "transferredFromUserId",
            "type": "string"
        },
        {
            "name": "expired",
            "baseName": "expired",
            "type": "boolean"
        },
        {
            "name": "parentComment",
            "baseName": "parentComment",
            "type": "string"
        },
        {
            "name": "userComment",
            "baseName": "userComment",
            "type": "string"
        },
        {
            "name": "price",
            "baseName": "price",
            "type": "PricesDto"
        },
        {
            "name": "duration",
            "baseName": "duration",
            "type": "ItemDto.DurationEnum"
        },
        {
            "name": "bundles",
            "baseName": "bundles",
            "type": "string"
        },
        {
            "name": "bundledWith",
            "baseName": "bundledWith",
            "type": "string"
        },
        {
            "name": "ipIds",
            "baseName": "ipIds",
            "type": "Array<string>"
        },
        {
            "name": "additionalNotificationEmails",
            "baseName": "additionalNotificationEmails",
            "type": "Array<string>"
        },
        {
            "name": "domainNameId",
            "baseName": "domainNameId",
            "type": "string"
        },
        {
            "name": "affiliateData",
            "baseName": "affiliateData",
            "type": "AffiliateData"
        },
        {
            "name": "startDate",
            "baseName": "startDate",
            "type": "Date"
        },
        {
            "name": "endDate",
            "baseName": "endDate",
            "type": "Date"
        },
        {
            "name": "timesPostponed",
            "baseName": "timesPostponed",
            "type": "Array<Date>"
        },
        {
            "name": "meta",
            "baseName": "meta",
            "type": "object"
        },
        {
            "name": "createdAt",
            "baseName": "createdAt",
            "type": "Date"
        },
        {
            "name": "updatedAt",
            "baseName": "updatedAt",
            "type": "Date"
        }    ];

    static getAttributeTypeMap() {
        return ItemDto.attributeTypeMap;
    }
}

export namespace ItemDto {
    export enum TypeEnum {
        Domain = <any> 'DOMAIN',
        Product = <any> 'PRODUCT'
    }
    export enum ActionEnum {
        ItemCreate = <any> 'item/create',
        ItemSuspend = <any> 'item/suspend',
        ItemUnsuspend = <any> 'item/unsuspend',
        ItemRenew = <any> 'item/renew',
        ItemCancel = <any> 'item/cancel',
        ItemDelete = <any> 'item/delete',
        ItemUpgrade = <any> 'item/upgrade',
        ItemUpdate = <any> 'item/update',
        ItemDowngrade = <any> 'item/downgrade',
        DomainCreate = <any> 'domain/create',
        DomainLock = <any> 'domain/lock',
        DomainUnlock = <any> 'domain/unlock',
        DomainRenew = <any> 'domain/renew',
        DomainBundleAdd = <any> 'domain/bundle/add',
        DomainBundleRemove = <any> 'domain/bundle/remove',
        DomainInfo = <any> 'domain/info',
        DomainRecall = <any> 'domain/recall',
        DomainTransferCheck = <any> 'domain/transfer/check',
        DomainTransferCancel = <any> 'domain/transfer/cancel',
        DomainTransferAccept = <any> 'domain/transfer/accept',
        DomainSendAuthCode = <any> 'domain/send-auth-code',
        DomainCheckAvailability = <any> 'domain/check-availability',
        DomainShieldActivate = <any> 'domain/shield/activate',
        DomainShieldDeactivate = <any> 'domain/shield/deactivate',
        DomainDelete = <any> 'domain/delete',
        DomainContactsInfo = <any> 'domain/contacts/info',
        DomainContactsCreate = <any> 'domain/contacts/create',
        DomainContactsUpdate = <any> 'domain/contacts/update',
        DomainContactsDelete = <any> 'domain/contacts/delete',
        DomainContactsRegistrant = <any> 'domain/contacts/registrant',
        DomainContactsAdmin = <any> 'domain/contacts/admin',
        DomainContactsTech = <any> 'domain/contacts/tech',
        DomainContactsBilling = <any> 'domain/contacts/billing',
        DomainResendVerificationEmail = <any> 'domain/resend-verification-email',
        DomainCheckClaims = <any> 'domain/check-claims',
        DomainModifyHosts = <any> 'domain/modify-hosts',
        DomainModifyAuthcode = <any> 'domain/modify-authcode',
        DomainGetTransferStatus = <any> 'domain/get-transfer-status',
        DomainCancelTransfer = <any> 'domain/cancel-transfer',
        DomainRequestTransferAway = <any> 'domain/request-transfer-away',
        DomainRequestTransfer = <any> 'domain/request-transfer',
        DomainCompleteTransferAway = <any> 'domain/complete-transfer-away',
        DomainRejectTransferAway = <any> 'domain/reject-transfer-away',
        DomainRejectTransferExpired = <any> 'domain/reject-transfer-expired'
    }
    export enum StatusEnum {
        Idle = <any> 'idle',
        Suspended = <any> 'suspended',
        Unsuspended = <any> 'unsuspended',
        Inprogress = <any> 'inprogress',
        Active = <any> 'active',
        Inactive = <any> 'inactive',
        Error = <any> 'error',
        Cancel = <any> 'cancel'
    }
    export enum DurationEnum {
        _1 = <any> '1',
        _2 = <any> '2',
        _3 = <any> '3',
        _4 = <any> '4',
        _5 = <any> '5',
        _6 = <any> '6',
        _7 = <any> '7',
        _8 = <any> '8',
        _9 = <any> '9',
        _10 = <any> '10',
        _11 = <any> '11',
        _12 = <any> '12',
        _24 = <any> '24',
        _36 = <any> '36',
        _48 = <any> '48',
        _60 = <any> '60',
        _72 = <any> '72',
        _84 = <any> '84',
        _96 = <any> '96',
        _108 = <any> '108',
        _120 = <any> '120'
    }
}
