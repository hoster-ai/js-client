/**
 * Hoster API
 * Hosting automation. The easy way
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';

export class IssueDto {
    /**
    * The unique identifier for the issue.
    */
    'id': string;
    /**
    * The title of the issue.
    */
    'title': string;
    /**
    * A brief text that describes the issue.
    */
    'description': string;
    /**
    * ParentId / UserId: Must provide at least one of two
    */
    'companyId'?: string;
    /**
    * The unique identifier of the user associated with the issue.
    */
    'forUserId'?: string;
    /**
    * The unique identifier of the item associated with the issue.
    */
    'forItemId'?: string;
    /**
    * The unique identifier of the order associated with the issue.
    */
    'forOrderId'?: string;
    /**
    * The unique identifier of the integration associated with the issue.
    */
    'integrationId'?: string;
    /**
    * Indicates the category of the issue.
    */
    'category': IssueDto.CategoryEnum;
    /**
    * Indicates the priority of the issue.
    */
    'priority': IssueDto.PriorityEnum;
    /**
    * Defines if the issue is resolved or not.
    */
    'resolved'?: boolean = false;
    /**
    * An array that determines the actions taken.
    */
    'actionsDone'?: Array<string>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "title",
            "baseName": "title",
            "type": "string"
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string"
        },
        {
            "name": "companyId",
            "baseName": "companyId",
            "type": "string"
        },
        {
            "name": "forUserId",
            "baseName": "forUserId",
            "type": "string"
        },
        {
            "name": "forItemId",
            "baseName": "forItemId",
            "type": "string"
        },
        {
            "name": "forOrderId",
            "baseName": "forOrderId",
            "type": "string"
        },
        {
            "name": "integrationId",
            "baseName": "integrationId",
            "type": "string"
        },
        {
            "name": "category",
            "baseName": "category",
            "type": "IssueDto.CategoryEnum"
        },
        {
            "name": "priority",
            "baseName": "priority",
            "type": "IssueDto.PriorityEnum"
        },
        {
            "name": "resolved",
            "baseName": "resolved",
            "type": "boolean"
        },
        {
            "name": "actionsDone",
            "baseName": "actionsDone",
            "type": "Array<string>"
        }    ];

    static getAttributeTypeMap() {
        return IssueDto.attributeTypeMap;
    }
}

export namespace IssueDto {
    export enum CategoryEnum {
        Order = <any> 'order',
        OrderItem = <any> 'order_item',
        Other = <any> 'other'
    }
    export enum PriorityEnum {
        Low = <any> 'low',
        Normal = <any> 'normal',
        Critical = <any> 'critical'
    }
}
